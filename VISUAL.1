#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include "SerialClass/SerialClass.h"


#define MAX_BUFFER 200
#define PAUSA_MS 200 
#define N 200

int menu(void)
{
	int opcion;
	printf("\n");
	printf("Menú Principal\n");
	printf("==============\n");
	printf("1 - Obtener en fuerza\n");
	printf("2 - Obtener peso\n");
	printf("3- Tarar\n");
	printf("4 - Salir de la aplicación\n");
	printf("Opción:");
	scanf_s("%d", &opcion);
	return opcion;
}
float obtener_fuerza(Serial* Arduino, char* port);
float obtener_peso(Serial* Arduino, char* port);
float tarar(Serial* Arduino, char* port);
int Enviar_y_Recibir(Serial* Arduino, const char* mensaje_enviar, char* mensaje_recibir);

float obtener_fuerza(Serial* Arduino, char* port){

	float peso = 0;
	float fuerza = 0;
	int bytesRecibidos;
	char mensaje_recibido[MAX_BUFFER];

	if (Arduino->IsConnected())
	{

		bytesRecibidos = Enviar_y_Recibir(Arduino, "GET_PESO\n", mensaje_recibido);
		if (bytesRecibidos <= 0)
		{
			printf("\nNo se ha recibido respuesta a la petición\n");

		}
		else
		{
			printf("\nLa respuesta recibida tiene %d bytes. Recibido=%s\n", bytesRecibidos, mensaje_recibido);
		}
	}
	else
	{
		printf("\nNo se ha podido conectar con Arduino.\n");
		printf("Revise la conexión, el puerto %s y desactive el monitor serie del IDE de Arduino.\n", port);
	}

	fuerza = peso * 9.81;

	return fuerza;
}
float obtener_peso(Serial* Arduino, char* port)
{
	float peso = 0;
    int bytesRecibidos;
    char mensaje_recibido[MAX_BUFFER];

	if (Arduino->IsConnected())
	{

		bytesRecibidos = Enviar_y_Recibir(Arduino, "GET_PESO\n", mensaje_recibido);
		if (bytesRecibidos <= 0)
		{
			printf("\nNo se ha recibido respuesta a la petición\n");

		}
		else
		{
			printf("\nLa respuesta recibida tiene %d bytes. Recibido=%s\n", bytesRecibidos, mensaje_recibido);
		}
	}
	else
	{
		printf("\nNo se ha podido conectar con Arduino.\n");
		printf("Revise la conexión, el puerto %s y desactive el monitor serie del IDE de Arduino.\n", port);
	}



	return peso;
}

float tarar(Serial* Arduino, char* port) {


	float peso = 0;
	int bytesRecibidos;
	char mensaje_recibido[MAX_BUFFER];

	if (Arduino->IsConnected())
	{

		bytesRecibidos = Enviar_y_Recibir(Arduino, "GET_PESO\n", mensaje_recibido);
		if (bytesRecibidos <= 0)
		{
			printf("\nNo se ha recibido respuesta a la petición\n");

		}
		else
		{
			printf("\nLa respuesta recibida tiene %d bytes. Recibido=%s\n", bytesRecibidos, mensaje_recibido);
		}
	}
	else
	{
		printf("\nNo se ha podido conectar con Arduino.\n");
		printf("Revise la conexión, el puerto %s y desactive el monitor serie del IDE de Arduino.\n", port);
	}

	peso = 0;

	return peso;
}

int main(void)
{
	Serial* Arduino;
	char puerto[] = "COM5"; // Puerto serie al que está conectado Arduino
	int opcion_menu;
	float peso;
	setlocale(LC_ALL, "es-ES");
	Arduino = new Serial((char*)puerto);
	do
	{
		opcion_menu = menu();
		switch (opcion_menu)
		{
		case 1:
			//verifica_sensores(Arduino, puerto);
			peso = obtener_fuerza(Arduino, puerto);
			break;
		case 2:
			peso = obtener_peso(Arduino, puerto);
			break;
		case 3:
			peso = tarar(Arduino, puerto);
			break;
		case 4:
			break;
		default: printf("\nOpción incorrecta\n");
		}
	} while (opcion_menu != 4);
	return 0;
}


int Enviar_y_Recibir(Serial* Arduino, const char* mensaje_enviar, char* mensaje_recibir)
{
	int bytes_recibidos = 0, total = 0;
	int intentos = 0, fin_linea = 0;
	Arduino->WriteData((char*)mensaje_enviar, strlen(mensaje_enviar));
	Sleep(PAUSA_MS);
	bytes_recibidos = Arduino->ReadData(mensaje_recibir, sizeof(char) * MAX_BUFFER - 1);
	while ((bytes_recibidos > 0 || intentos < 5) && fin_linea == 0)
	{
		if (bytes_recibidos > 0)
		{
			total += bytes_recibidos;
			if (mensaje_recibir[total - 1] == 13 || mensaje_recibir[total - 1] == 10)
				fin_linea = 1;
		}
		else
			intentos++;
		Sleep(PAUSA_MS);
		bytes_recibidos = Arduino->ReadData(mensaje_recibir + total, sizeof(char) * MAX_BUFFER - 1);
	}
	if (total > 0)
		mensaje_recibir[total - 1] = '\0';
	return total;
}
